class ChessGame:
    '''инициализация шахмат'''
    def __init__(self):
        self.board = self.create_board()  #Рисуем поле
        self.current_player = 'white'      #обозначаем очередь хода

    def create_board(self):
        '''заполняем поле фигурами по всем правилам'''
        board = []
        for i in range(8):
            row = []
            for j in range(8):
                row.append('  ')
            board.append(row)
        board[7] = ['♖', '♘', '♗', '♕', '♔', '♗', '♘', '♖']
        board[6] = ['♙'] * 8
        board[1] = ['♟'] * 8
        board[0] = ['♜', '♞', '♝', '♛', '♚', '♝', '♞', '♜']
        return board



    def Color_of_pieces(self):
        '''обозначаем цвет фигур, дабы один цвет не бил по друг другу'''
        if self.current_player == 'white':
            pieces = ['♜', '♞', '♝', '♛', '♚', '♟']
        else:
            pieces = ['♖', '♘', '♗', '♕', '♔', '♙']
        return pieces


    def rook(self, start, end):
        '''обозначаем поля, куда может ходить ладья'''
        start_row, start_col = start
        end_row, end_col = end
        if (start_row != end_row and start_col != end_col) or (start_row != end_row and start_col != end_col):
            return False
        return True



    def bishop(self, start, end):
        '''обозначаем поля, куда может ходить слон'''
        start_row, start_col = start
        end_row, end_col = end
        if abs(start_row - end_row) != abs(start_col - end_col):
            return False
        return True


    def knight(self,start,end):
        '''обозначаем поля, куда может ходить конь'''
        start_row, start_col = start
        end_row, end_col = end
        if end_row - start_row == 2 and (end_col - start_col == 1 or end_col - start_col == -1) or \
                end_row - start_row == -2 and (end_col - start_col == 1 or end_col - start_col == -1) or \
                end_row - start_row == 1 and (end_col - start_col == 2 or end_col - start_col == -2) or \
                end_row - start_row == -1 and (end_col - start_col == 2 or end_col - start_col == -2):
            return False
        return True



    def king(self,start,end):
        return True


    def pawn(self,start,end):
        return True



    def print_board(self):
        '''печатаем интерактивную доску'''
        for row in self.board:
            print(' '.join(row))

    def is_valid_move(self, start, end):
        '''проверка хода на корректность (основываясь на правилах игры)'''
        start_row, start_col = start
        end_row, end_col = end
        if self.board[start_row][start_col] and self.board[end_row][end_col] in self.Color_of_pieces():
            return False
        if self.board[start_row][start_col] in '♜♖' and not self.rook(start, end):
            return False
        if self.board[start_row][start_col] in '♝♗' and not self.bishop(start, end):
            return False
        if self.board[start_row][start_col] in '♞♘' and not self.knight(start, end):
            return False
        if self.board[start_row][start_col] in '♛♕' and not self.rook(start, end) and not self.bishop(start,end):
            return False
        if self.board[start_row][start_col] in '♚♔' and not self.rook(start, end) and not self.bishop(start,end):
            return False

        return True



    def make_move(self, start, end):
        '''функция перемещения фигуры с одной клетки в другую'''
        if self.is_valid_move(start, end):
            start_row, start_col = start
            end_row, end_col = end
            piece = self.board[start_row][start_col]
            self.board[start_row][start_col] = '  '
            self.board[end_row][end_col] = piece


    def switch_player(self):
        '''переход очереди одного цвета на другой'''
        if self.current_player == 'white':
            self.current_player = 'black'
        else:
            self.current_player = 'white'


    def play(self):
        '''функция самих внутриигровых действий'''
        while True:
            self.print_board()
            start_input = input(f"{self.current_player} player's move (e.g. 'c2 c4'): ")
            start, end = start_input.split()
            start = (int(start[1]) - 1, ord(start[0]) - 97)
            end = (int(end[1]) - 1, ord(end[0]) - 97)
            self.make_move(start, end)
            self.switch_player()


game = ChessGame()
game.play()
